// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YaHo.YaHoApiService.DAL.Services.Context;

namespace YaHoApiService.DAL.Services.Migrations
{
    [DbContext(typeof(YaHoContext))]
    [Migration("20200517114646_NewMogration")]
    partial class NewMogration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.ConfirmDeliveryChargeDbo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AutomaticConfirm")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomerConfirm")
                        .HasColumnType("bit");

                    b.Property<bool?>("DeliveryConfirm")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewPrice")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PreviousPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ConfirmDeliveryCharges");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.CustomerDbo", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.CustomerReviewDbo", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerReviews");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.DeliveryDbo", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.DeliveryReviewDbo", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryReviews");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.MediaDbo", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("MediaId");

                    b.HasIndex("ProductId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.OrderDbo", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Bargain")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryCharge")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryFrom")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DeliveryPlace")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedDateFault")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.OrderRequestDbo", b =>
                {
                    b.Property<int>("OrderRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("OrderRequestId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderRequests");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.ProductDbo", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("Hold")
                        .HasColumnType("int");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a5580b20-e576-48a6-85c4-27656ac6812f",
                            AccessFailedCount = 0,
                            Balance = 500,
                            ConcurrencyStamp = "c6e593ea-d7ac-4262-bb68-c1b7bbc31407",
                            Description = "Hello",
                            Email = "user_1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_1",
                            Hold = 0,
                            InitialDate = new DateTime(2020, 5, 17, 9, 46, 46, 224, DateTimeKind.Utc).AddTicks(4179),
                            LastName = "User_1",
                            LockoutEnabled = false,
                            PhoneNumber = "+380500832005",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77796317-a095-4f9f-9f31-e201440971e1",
                            TwoFactorEnabled = false,
                            UserName = "User_1 User_1"
                        },
                        new
                        {
                            Id = "8e43fadd-429e-4343-b940-55387dd76a4c",
                            AccessFailedCount = 0,
                            Balance = 700,
                            ConcurrencyStamp = "c3dae7d8-2179-4030-9be3-8ffd145dfd4e",
                            Description = "Hello",
                            Email = "user_2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_2",
                            Hold = 0,
                            InitialDate = new DateTime(2020, 5, 17, 8, 46, 46, 224, DateTimeKind.Utc).AddTicks(5124),
                            LastName = "User_2",
                            LockoutEnabled = false,
                            PhoneNumber = "+380500832006",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79480a49-7f8e-46b5-bcb1-abeaca3b1f4f",
                            TwoFactorEnabled = false,
                            UserName = "User_2 User_2"
                        },
                        new
                        {
                            Id = "ef90f6f9-1a98-4421-a2b6-b084eae8eb6a",
                            AccessFailedCount = 0,
                            Balance = 800,
                            ConcurrencyStamp = "de813256-f9cf-4be6-975b-8fe631c25b50",
                            Description = "Hello",
                            Email = "user_3@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_3",
                            InitialDate = new DateTime(2020, 5, 17, 7, 46, 46, 224, DateTimeKind.Utc).AddTicks(5217),
                            LastName = "User_3",
                            LockoutEnabled = false,
                            PhoneNumber = "+380500832007",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c09fed34-fb40-4002-af30-a29bdd06d74a",
                            TwoFactorEnabled = false,
                            UserName = "User_3 User_3"
                        },
                        new
                        {
                            Id = "d4c565ec-aa35-48fd-bc35-a96d60eda79f",
                            AccessFailedCount = 0,
                            Balance = 200,
                            ConcurrencyStamp = "fc8ebf66-82ba-4b78-9018-9d8369af577a",
                            Description = "Hello",
                            Email = "user_4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_4",
                            Hold = 0,
                            InitialDate = new DateTime(2020, 5, 17, 6, 46, 46, 224, DateTimeKind.Utc).AddTicks(5231),
                            LastName = "User_4",
                            LockoutEnabled = false,
                            PhoneNumber = "+380500832008",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f038894f-a72d-4cba-a412-4af971196428",
                            TwoFactorEnabled = false,
                            UserName = "User_4 User_4"
                        },
                        new
                        {
                            Id = "2ae3246c-0451-46e8-aeb8-e59a8efbecdd",
                            AccessFailedCount = 0,
                            Balance = 1200,
                            ConcurrencyStamp = "baed7f14-bf70-4579-bd51-b0f937a73793",
                            Description = "Hello",
                            Email = "user_5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_5",
                            Hold = 0,
                            InitialDate = new DateTime(2020, 5, 17, 5, 46, 46, 224, DateTimeKind.Utc).AddTicks(5244),
                            LastName = "User_5",
                            LockoutEnabled = false,
                            PhoneNumber = "+380500832015",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07e6c33c-cf43-4122-a668-cf9da7843c2f",
                            TwoFactorEnabled = false,
                            UserName = "User_5 User_5"
                        },
                        new
                        {
                            Id = "062d7a36-8598-4a41-99da-94573f9ca66a",
                            AccessFailedCount = 0,
                            Balance = 600,
                            ConcurrencyStamp = "b09e86c5-9215-4fcc-a6a8-6d38dd53223f",
                            Description = "Hello",
                            Email = "user_6@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_6",
                            Hold = 0,
                            InitialDate = new DateTime(2020, 5, 17, 4, 46, 46, 224, DateTimeKind.Utc).AddTicks(5280),
                            LastName = "User_6",
                            LockoutEnabled = false,
                            PhoneNumber = "+380500833005",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8fd9714-ddda-46c4-b010-bb4dc54e3e1d",
                            TwoFactorEnabled = false,
                            UserName = "User_6 User_6"
                        },
                        new
                        {
                            Id = "f78d77be-3724-41d8-a8ea-8a0098b5979f",
                            AccessFailedCount = 0,
                            Balance = 500,
                            ConcurrencyStamp = "cee12f17-3bc0-47f5-aa84-8315c88a7388",
                            Description = "Hello",
                            Email = "user_7@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_7",
                            InitialDate = new DateTime(2020, 5, 17, 3, 46, 46, 224, DateTimeKind.Utc).AddTicks(5293),
                            LastName = "User_7",
                            LockoutEnabled = false,
                            PhoneNumber = "+380500832105",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dad65ff3-e302-4796-89ab-6bfe07c98101",
                            TwoFactorEnabled = false,
                            UserName = "User_7 User_7"
                        },
                        new
                        {
                            Id = "83ac8522-a61c-4461-999e-d6902cf6346b",
                            AccessFailedCount = 0,
                            Balance = 500,
                            ConcurrencyStamp = "84c9503e-2ffc-4ad9-987a-0f90e2cb0303",
                            Description = "Hello",
                            Email = "user_8@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_8",
                            Hold = 0,
                            InitialDate = new DateTime(2020, 5, 17, 9, 46, 46, 224, DateTimeKind.Utc).AddTicks(5322),
                            LastName = "User_8",
                            LockoutEnabled = false,
                            PhoneNumber = "+180500832005",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94834cb1-8e81-48b8-863f-0b57caafd048",
                            TwoFactorEnabled = false,
                            UserName = "User_8 User_8"
                        },
                        new
                        {
                            Id = "513e5755-c568-40c9-98aa-06e14a66f622",
                            AccessFailedCount = 0,
                            Balance = 500,
                            ConcurrencyStamp = "ebb17354-7c56-47a4-881c-64c286f97520",
                            Description = "Hello",
                            Email = "user_9@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User_9",
                            InitialDate = new DateTime(2020, 5, 17, 9, 46, 46, 224, DateTimeKind.Utc).AddTicks(5335),
                            LastName = "User_9",
                            LockoutEnabled = false,
                            PhoneNumber = "+380590832005",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11990895-c92e-43a6-a873-f9e3072d0089",
                            TwoFactorEnabled = false,
                            UserName = "User_9 User_9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.ConfirmDeliveryChargeDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.OrderDbo", "Order")
                        .WithMany("ConfirmDeliveryCharges")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.CustomerDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", "User")
                        .WithOne("Customer")
                        .HasForeignKey("YaHo.YaHoApiService.DAL.Data.Entities.CustomerDbo", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.CustomerReviewDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.CustomerDbo", "Customer")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", "User")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.DeliveryDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", "User")
                        .WithOne("Delivery")
                        .HasForeignKey("YaHo.YaHoApiService.DAL.Data.Entities.DeliveryDbo", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.DeliveryReviewDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.DeliveryDbo", "Delivery")
                        .WithMany("DeliveryReviews")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.UserDbo", "User")
                        .WithMany("DeliveryReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.MediaDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.ProductDbo", "Product")
                        .WithMany("Media")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.OrderDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.CustomerDbo", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.OrderRequestDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.DeliveryDbo", "Delivery")
                        .WithMany("OrderRequests")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.OrderDbo", "Order")
                        .WithMany("OrderRequests")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("YaHo.YaHoApiService.DAL.Data.Entities.ProductDbo", b =>
                {
                    b.HasOne("YaHo.YaHoApiService.DAL.Data.Entities.OrderDbo", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
